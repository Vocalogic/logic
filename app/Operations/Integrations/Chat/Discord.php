<?php

namespace App\Operations\Integrations\Chat;

use App\Enums\Core\ChatChannel;
use App\Enums\Core\IntegrationRegistry;
use App\Operations\API\Discord\DiscordCore;
use App\Operations\Integrations\BaseIntegration;
use App\Operations\Integrations\Integration;
use Illuminate\Http\Request;

class Discord extends BaseIntegration implements Integration, ChatInterface
{
    public IntegrationRegistry $ident = IntegrationRegistry::Discord;

    /**
     * Bind Discord API Implementation
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Get application name
     * @return string
     */
    public function getName(): string
    {
        return "Discord";
    }

    /**
     * Get the website for the integration
     * @return string
     */
    public function getWebsite(): string
    {
        return "https://www.discord.com";
    }

    /**
     * Get description
     * @return string
     */
    public function getDescription(): string
    {
        return "Discord servers are organized into topic-based channels where you can collaborate, share, and just talk about your day without clogging up a group chat.";
    }

    /**
     * Get Logo
     * @return string
     */
    public function getLogo(): string
    {
        return "/assets/images/integrations/discord.png";
    }

    /**
     * Get required configuration for slack.
     * @return object[]
     */
    public function getRequired(): array
    {
        return [
            (object)
            [
                'var'         => 'application_id',
                'item'        => "Discord Application ID",
                'description' => "Enter the Application ID for your Discord App",
                'default'     => '',
                'protected'   => false
            ],
            (object)
            [
                'var'         => 'public_key',
                'item'        => "Discord Public Key",
                'description' => "Enter the Application Public Key for your Discord App",
                'default'     => '',
                'protected'   => true
            ],
             (object)
            [
                'var'         => 'bot_token',
                'item'        => "Discord Bot Token",
                'description' => "Enter the Token generated by your Discord Bot",
                'default'     => '',
                'protected'   => true
            ],
            (object)
            [
                'var'         => 'channel_sales',
                'item'        => "Channel ID for Sales",
                'description' => "Enter the Channel ID for Sales",
                'default'     => '',
                'protected'   => false
            ],
            (object)[
                'var'         => 'channel_support',
                'item'        => "Channel ID for Support",
                'description' => "Enter the Channel ID for posts to the Support channel",
                'default'     => '',
                'protected'   => false
            ],

            (object)[
                'var'         => 'channel_accounting',
                'item'        => "Channel ID for Accounting",
                'description' => "Enter the Channel ID for posts to the Accounting channel",
                'default'     => '',
                'protected'   => false
            ],
        ];
    }

    /** -------------------- End of Configuration ---------------------- */

    /**
     * Generate the Oauth Redirect for Discord
     * @return string
     */
    public function getOauthRedirect(): string
    {
        $discord = new DiscordCore($this->config);
        return $discord->getRedirectUrl();
    }

    /**
     * Process the callback authorization from Discord
     * Since we are using bot tokens, this just authorizes the bot and
     * never actually calls this. Keeping it just for consistency.
     * @param Request $request
     * @return void
     * @throws LogicException
     */
    public function processCallback(Request $request): void
    {
        $discord = new DiscordCore($this->config);
        $discord->processCallback($request);
    }

    /**
     * Send a chat message
     * @param ChatChannel $channel
     * @param string      $message
     * @return void
     */
    public function send(ChatChannel $channel, string $message): void
    {
        $discord = new DiscordCore($this->config);
        $discord->send($channel, $message);
    }

}
