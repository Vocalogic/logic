<?php

namespace Tests\Browser;

use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Support\Str;
use Laravel\Dusk\Browser;
use Tests\DuskTestCase;

class CatalogTest extends DuskTestCase
{

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        BrowserShared::setupInstallation();
        $this->user = BrowserShared::$user;

    }

    /**
     * A Dusk test example.
     *
     * @return void
     */
    public function testCanSeeServices()
    {
        $this->browse(function (Browser $browser) {
            $browser->loginAs($this->user)
                ->maximize()
                ->visit('/admin/bill_categories/services')
                ->assertSee('Category');
        });
    }

    public function testCreateCategory()
    {
        $this->browse(function (Browser $browser) {
            $browser->click(".btn-outline-secondary")
                ->waitFor('.form-floating')
                ->type('name', "My Service Category")
                ->type('description', 'My Very own Service Category')
                ->click('.wait')
                ->assertSee('My Very own');
        });
    }

    public function testCreateService()
    {
        $code = Str::random(6);
        $this->browse(function (Browser $browser) use ($code) {
            $browser->clickLink("My Service Category")
                ->waitForText("New Service")
                ->clickLink("New Service")
                ->waitForText("Define")
                ->type('code', "TEST-$code")
                ->type('name', "My Service")
                ->type('description', "This is a new service created by a test")
                ->click('.lPricing')
                ->type('msrp', 100)
                ->type('mrc', 50)
            ->type('ex_opex', 10)
                ->type('ex_opex_description', "Cost of Service")
                ->click(".lMarketing")
                ->type('feature_headline', "This is a great service")
                ->type('feature_list', "This is good\nThis is gooder\nThis is goodest.")
                ->press("Save")
                ->assertSee("My Service");
        });

    }
}
